ruleset manage_sensors {
  meta {
    shares threshold, sensors, contact_number
  }
  global {
    sensors = function() {
      ent:sensors.defaultsTo({});
    }
    threshold = function() {
      ent:threshold.defaultsTo(74);
    }
    contact_number = function() {
      ent:contact_number.defaultsTo("+14806690991");
    }
    required_rulesets = {
      "file:///Users/braydonhunt/School/CS462/pico/Lab1/Lab2/io.picolabs.wovyn.emitter.krl": 0,
      "file:///Users/braydonhunt/School/CS462/pico/Lab1/Lab4/sensor_profile.krl": 1,
      "file:///Users/braydonhunt/School/CS462/pico/Lab1/Lab2/wovyn_base.krl": 2,
      "file:///Users/braydonhunt/School/CS462/pico/Lab1/Lab3/temperature_store.krl": 3,
      "extra": 5,
    };
  }

  rule sensor_manager_set_threshold {
    select when sensor_manager set_threshold
    pre {
      thresh = (event:attrs{"threshold"} || ent:threshold || 74).klog("Recording New Threshold For All Sensors: ");
    }
    noop();
    fired {
      ent:threshold := thresh;
    }
  }

  rule sensor_manager_set_contact {
    select when sensor_manager set_contact
    pre {
      contact_number = (event:attrs{"contact_number"} || ent:contact_number || "+14806690991").klog("Recording New contact_number: ");
    }
    noop();
    fired {
      ent:contact_number := contact_number;
    }
  }

  rule sensor_installed {
    select when sensor installed 
    pre {
      eci = (event:attrs{"eci"} || "not found").klog("Installed sensor with eci: ");
      name = (event:attrs{"name"} || "not found").klog("Installed sensor with name: ");
    }
  }

  rule sensor_created {
    select when wrangler new_child_created 
    foreach required_rulesets setting (x)
    pre {
      eci = (event:attrs{"eci"} || "not found").klog("Creating sensor with eci: ");
      name = (event:attrs{"name"} || "not found").klog("Creating sensor with name: ");
      res = (x || "not found").klog("Here is my iteration: ");
    }
    raise sensor event "installed" attributes event:attrs on last
    notfired {
      event:send({"eci": eci, "domain": "wrangler", "type": "install_ruleset_request", "attrs": {"url": x}})
    }
  }

  rule unneeded_sensor {
    select when sensor unneeded_sensor
    pre {
      sensor_name = event:attrs{"sensor_name"};
      exists = ent:sensors && ent:sensors >< sensor_name;
      eci = ent:sensors.get([sensor_name]);
    }
    if not exists then
      send_directive("sensor_not_exists", {"sensor_name": sensor_name})
    notfired {
      ent:sensors := ent:sensors.defaultsTo({}).delete(sensor_name)
      raise wrangler event "child_deletion_request" attributes {
        "eci": eci
      }
    }
  }

  rule new_sensor {
    select when sensor new_sensor
    pre {
      sensor_name = event:attrs{"sensor_name"}
      exists = ent:sensors && ent:sensors >< sensor_name
    }
    if exists then
      send_directive("sensor_exists", {"sensor_name":sensor_name})
    notfired {
      ent:sensors := ent:sensors.defaultsTo({}).put(sensor_name, 0)
      raise wrangler event "new_child_request"
        attributes { "name": sensor_name, "backgroundColor": "#ff69b4" }
    }
  }
}
